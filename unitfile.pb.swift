// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unitfile.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ProtoFiles_AccData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Double = 0

  var x: Float = 0

  var y: Float = 0

  var z: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtoFiles_LocData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Double = 0

  var latitude: Float = 0

  var longitude: Float = 0

  var accuracy: Float = 0

  var speed: Float = 0

  var direction: Bool = false

  var accData: [ProtoFiles_AccData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtoFiles_UnitFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var driverID: UInt64 = 0

  var startTime: Double = 0

  var endTime: Double = 0

  var locData: [ProtoFiles_LocData] = []

  var timezoneoffset: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ProtoFiles"

extension ProtoFiles_AccData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.timestamp)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularDoubleField(value: self.timestamp, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoFiles_AccData, rhs: ProtoFiles_AccData) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoFiles_LocData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
    4: .same(proto: "accuracy"),
    5: .same(proto: "speed"),
    6: .same(proto: "direction"),
    7: .standard(proto: "acc_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.timestamp)
      case 2: try decoder.decodeSingularFloatField(value: &self.latitude)
      case 3: try decoder.decodeSingularFloatField(value: &self.longitude)
      case 4: try decoder.decodeSingularFloatField(value: &self.accuracy)
      case 5: try decoder.decodeSingularFloatField(value: &self.speed)
      case 6: try decoder.decodeSingularBoolField(value: &self.direction)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.accData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularDoubleField(value: self.timestamp, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 3)
    }
    if self.accuracy != 0 {
      try visitor.visitSingularFloatField(value: self.accuracy, fieldNumber: 4)
    }
    if self.speed != 0 {
      try visitor.visitSingularFloatField(value: self.speed, fieldNumber: 5)
    }
    if self.direction != false {
      try visitor.visitSingularBoolField(value: self.direction, fieldNumber: 6)
    }
    if !self.accData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accData, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoFiles_LocData, rhs: ProtoFiles_LocData) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.accuracy != rhs.accuracy {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.accData != rhs.accData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoFiles_UnitFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnitFile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "driver_id"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
    4: .standard(proto: "loc_data"),
    5: .same(proto: "timezoneoffset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.driverID)
      case 2: try decoder.decodeSingularDoubleField(value: &self.startTime)
      case 3: try decoder.decodeSingularDoubleField(value: &self.endTime)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.locData)
      case 5: try decoder.decodeSingularInt32Field(value: &self.timezoneoffset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.driverID != 0 {
      try visitor.visitSingularUInt64Field(value: self.driverID, fieldNumber: 1)
    }
    if self.startTime != 0 {
      try visitor.visitSingularDoubleField(value: self.startTime, fieldNumber: 2)
    }
    if self.endTime != 0 {
      try visitor.visitSingularDoubleField(value: self.endTime, fieldNumber: 3)
    }
    if !self.locData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locData, fieldNumber: 4)
    }
    if self.timezoneoffset != 0 {
      try visitor.visitSingularInt32Field(value: self.timezoneoffset, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoFiles_UnitFile, rhs: ProtoFiles_UnitFile) -> Bool {
    if lhs.driverID != rhs.driverID {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.locData != rhs.locData {return false}
    if lhs.timezoneoffset != rhs.timezoneoffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
